// inputPanel.js ‚Äì ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏≠‡∏ô ‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô
import { saveToMemory, getMemory } from './memoryStore.js';
import { getCurrentProject } from './projectManager.js';

const container = document.getElementById('input-panel-container');
let currentLine = 'hero'; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏Å
let episodeCount = 3; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 3 ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å

// üîÅ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export function renderInputPanel(lineName = 'hero', count = 3) {
  currentLine = lineName;
  episodeCount = count;
  container.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô

  const title = document.createElement('h3');
  title.textContent = `üßµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô: ${lineLabel(lineName)} (${count} ‡∏ï‡∏≠‡∏ô)`;
  container.appendChild(title);

  for (let i = 1; i <= count; i++) {
    const episodeBox = createEpisodeBox(i);
    container.appendChild(episodeBox);
  }

  const controlRow = createControlButtons();
  container.appendChild(controlRow);
}

// üß± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å 1 ‡∏ï‡∏≠‡∏ô
function createEpisodeBox(episodeNum) {
  const wrapper = document.createElement('div');
  wrapper.className = 'episode-box';
  wrapper.style.marginBottom = '1.5rem';

  const label = document.createElement('label');
  label.textContent = `‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum}`;
  label.style.fontWeight = 'bold';

  const textarea = document.createElement('textarea');
  textarea.placeholder = 'üìù ‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏Å‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ...';
  textarea.rows = 4;
  textarea.style.width = '100%';

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  const old = getMemory(getCurrentProject(), currentLine, `‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum}`);
  if (old) textarea.value = old;

  const saveBtn = document.createElement('button');
  saveBtn.textContent = 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å';
  saveBtn.style.marginTop = '0.5rem';
  saveBtn.onclick = () => {
    const content = textarea.value.trim();
    saveToMemory(getCurrentProject(), currentLine, `‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum}`, content);
    alert(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö`);
  };

  const skipBtn = document.createElement('button');
  skipBtn.textContent = '‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ';
  skipBtn.style.marginLeft = '0.5rem';
  skipBtn.onclick = () => {
    alert(`‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum} ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`);
  };

  wrapper.appendChild(label);
  wrapper.appendChild(textarea);
  wrapper.appendChild(saveBtn);
  wrapper.appendChild(skipBtn);

  return wrapper;
}

// üß© ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î ‡∏ï‡∏≠‡∏ô
function createControlButtons() {
  const row = document.createElement('div');
  row.style.marginTop = '1rem';

  const addBtn = document.createElement('button');
  addBtn.textContent = '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≠‡∏ô';
  addBtn.onclick = () => {
    episodeCount++;
    renderInputPanel(currentLine, episodeCount);
  };

  const removeBtn = document.createElement('button');
  removeBtn.textContent = '‚ûñ ‡∏•‡∏ö‡∏ï‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢';
  removeBtn.style.marginLeft = '1rem';
  removeBtn.onclick = () => {
    if (episodeCount > 1) {
      episodeCount--;
      renderInputPanel(currentLine, episodeCount);
    }
  };

  row.appendChild(addBtn);
  row.appendChild(removeBtn);
  return row;
}

// üî§ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
function lineLabel(key) {
  const map = {
    'hero': '‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏Å',
    'villain': '‡∏ï‡∏±‡∏ß‡∏£‡πâ‡∏≤‡∏¢',
    'support': '‡∏ï‡∏±‡∏ß‡∏£‡∏≠‡∏á',
    'subplot': '‡∏ï‡∏±‡∏ß‡πÄ‡∏™‡∏£‡∏¥‡∏°',
    'twist': '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏•‡∏¥‡∏Å‡∏ú‡∏±‡∏ô',
    'setting': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å'
  };
  return map[key] || key;
}

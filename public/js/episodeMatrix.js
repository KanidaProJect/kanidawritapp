// js/episodeMatrix.js

import { loadProject, saveProject } from "./projectManager.js";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà render ‡∏ü‡∏≠‡∏£‡πå‡∏°
export function renderEpisodeForm(projectName, episodeIndex) {
  const project = loadProject(projectName);
  if (!project) {
    alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå");
    return;
  }

  const ep = project.episodes[episodeIndex];
  if (!ep) {
    alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏");
    return;
  }

  const formHTML = `
    <div class="form-box">
      <h3>${ep.title} <span style="font-weight: normal; color: #555;">(${ep.timeframe})</span></h3>

      <label>‡∏û‡∏£‡∏∞-‡∏ô‡∏≤‡∏á:</label>
      <textarea id="input-couple">${ep.strings.couple}</textarea>

      <label>‡∏ï‡∏±‡∏ß‡∏£‡∏≠‡∏á:</label>
      <textarea id="input-sub">${ep.strings.sub}</textarea>

      <label>‡∏ï‡∏±‡∏ß‡πÄ‡∏™‡∏£‡∏¥‡∏°:</label>
      <textarea id="input-extra">${ep.strings.extra}</textarea>

      <label>‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®:</label>
      <textarea id="input-tone">${ep.strings.tone}</textarea>

      <label>‡πÄ‡∏ß‡∏•‡∏≤ (‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á):</label>
      <textarea id="input-time">${ep.strings.time}</textarea>

      <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</label>
      <textarea id="input-setting">${ep.strings.setting}</textarea>

      <button id="save-episode">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
    </div>
  `;

  const container = document.getElementById("episodeForm");
  if (!container) {
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö container ‡∏ä‡∏∑‡πà‡∏≠ episodeForm ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ HTML");
    return;
  }

  container.innerHTML = formHTML;

  document.getElementById("save-episode").onclick = () => {
    ep.strings.couple = document.getElementById("input-couple").value.trim();
    ep.strings.sub = document.getElementById("input-sub").value.trim();
    ep.strings.extra = document.getElementById("input-extra").value.trim();
    ep.strings.tone = document.getElementById("input-tone").value.trim();
    ep.strings.time = document.getElementById("input-time").value.trim();
    ep.strings.setting = document.getElementById("input-setting").value.trim();

    saveProject(projectName, project);
    alert("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  };
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° editEpisode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å index.html
export function editEpisode() {
  const projectName = prompt("üìÇ ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ:");
  const episodeIndex = parseInt(prompt("üî¢ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏≠‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0):"));
  if (projectName && !isNaN(episodeIndex)) {
    renderEpisodeForm(projectName.trim(), episodeIndex);
  } else {
    alert("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  }
}

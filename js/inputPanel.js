// public/js/inputPanel.js
import { saveProject, getCurrentProjectName, getCurrentProjectData } from './projectManager.js';

const container = document.getElementById('input-panel-container');
let currentLine = 'hero';
let episodeCount = 3;

export function renderInputPanel(lineName = 'hero', count = 3) {
  const currentProjectName = getCurrentProjectName();
  if (!currentProjectName) {
    container.innerHTML = '<p>‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏û‡∏•‡πá‡∏≠‡∏ï</p>';
    return;
  }

  const projectData = getCurrentProjectData();
  if (projectData && projectData.totalEpisodes) {
    episodeCount = projectData.totalEpisodes;
  }

  currentLine = lineName;
  container.innerHTML = '';

  const title = document.createElement('h3');
  title.textContent = `üßµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô: ${lineLabel(lineName)} (${episodeCount} ‡∏ï‡∏≠‡∏ô)`;
  container.appendChild(title);

  for (let i = 0; i < episodeCount; i++) { // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç loop ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0
    const episodeBox = createEpisodeBox(i);
    container.appendChild(episodeBox);
  }

  // ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏ï‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≤‡∏Å storySetup
  // const controlRow = createControlButtons();
  // container.appendChild(controlRow);
}

function createEpisodeBox(episodeNum) {
  const wrapper = document.createElement('div');
  wrapper.className = 'episode-box';
  wrapper.style.marginBottom = '1.5rem';

  const label = document.createElement('label');
  label.textContent = `‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum + 1}`; // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1, 2, 3...
  label.style.fontWeight = 'bold';

  const textarea = document.createElement('textarea');
  textarea.placeholder = 'üìù ‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...';
  textarea.rows = 4;
  textarea.style.width = '100%';

  const projectData = getCurrentProjectData();
  const oldContent = projectData?.episodes?.[episodeNum]?.strings?.[currentLine] || ''; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (oldContent) textarea.value = oldContent;

  const saveBtn = document.createElement('button');
  saveBtn.textContent = 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å';
  saveBtn.style.marginTop = '0.5rem';
  saveBtn.onclick = () => {
    const content = textarea.value.trim();
    saveToProject(episodeNum, content);
    alert(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum + 1} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö`);
  };

  const skipBtn = document.createElement('button');
  skipBtn.textContent = '‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ';
  skipBtn.style.marginLeft = '0.5rem';
  skipBtn.onclick = () => {
    alert(`‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum + 1} ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`);
  };

  wrapper.appendChild(label);
  wrapper.appendChild(textarea);
  wrapper.appendChild(saveBtn);
  wrapper.appendChild(skipBtn);

  return wrapper;
}

function saveToProject(episodeNum, content) {
  const currentProjectName = getCurrentProjectName();
  const projectData = getCurrentProjectData();
  
  if (projectData && projectData.episodes) {
    if (!projectData.episodes[episodeNum]) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      projectData.episodes[episodeNum] = {
        title: `‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${episodeNum + 1}`,
        timeframe: "",
        strings: {
          couple: "",
          sub: "",
          extra: "",
          tone: "",
          time: "",
          setting: ""
        }
      };
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    projectData.episodes[episodeNum].strings[currentLine] = content;

    saveProject(currentProjectName, projectData);
    return true;
  }
  return false;
}

function lineLabel(key) {
  const map = {
    'hero': '‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏Å',
    'villain': '‡∏ï‡∏±‡∏ß‡∏£‡πâ‡∏≤‡∏¢',
    'support': '‡∏ï‡∏±‡∏ß‡∏£‡∏≠‡∏á',
    'subplot': '‡∏ï‡∏±‡∏ß‡πÄ‡∏™‡∏£‡∏¥‡∏°',
    'twist': '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏•‡∏¥‡∏Å‡∏ú‡∏±‡∏ô',
    'setting': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å'
  };
  return map[key] || key;
}
